@using System.Reflection
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.WebAssembly.Services
@inject LazyAssemblyLoader _assemblyLoader

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(Program).Assembly"
            AdditionalAssemblies="@_lazyLoadedAssemblies" OnNavigateAsync="@OnNavigateAsync">
        <Navigating>
            <div style="padding:20px;background-color:blue;color:white">
                <p>Loading the requested page&hellip;</p>
            </div>
        </Navigating>
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    @if (!context.User.Identity.IsAuthenticated)
                    {
                        <RedirectToLogin />
                    }
                    else
                    {
                        <p>You are not authorized to access this resource.</p>
                    }
                </NotAuthorized>
            </AuthorizeRouteView>
        </Found>
        <NotFound>
            <LayoutView Layout="@typeof(MainLayout)">
                <p>Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>
@code {
    private readonly List<Assembly> _lazyLoadedAssemblies = new List<Assembly>
{
            typeof(NotLazyLoaded.Index).Assembly
    };

    private Task OnNavigateAsync(NavigationContext args)
    {
        var path = args.Path;
        if (path.StartsWith("counter"))
        {
            return LoadAssemblyAsync("LazyLoad1.dll");
        }

        if (path.StartsWith("fetchdata"))
        {
            return LoadAssemblyAsync($"LazyLoad2.dll");
        }


        return Task.CompletedTask;
    }

    private async Task LoadAssemblyAsync(string assemblyName)
    {
        var assemblies = await _assemblyLoader.LoadAssembliesAsync(
            new[] { assemblyName }).ConfigureAwait(false);
        _lazyLoadedAssemblies.AddRange(assemblies.Where(a => !_lazyLoadedAssemblies.Any(l => l.FullName == a.FullName)));
    }
}